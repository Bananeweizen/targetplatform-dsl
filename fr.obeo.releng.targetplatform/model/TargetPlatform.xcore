@GenModel(prefix="TargetPlatform", modelName="TargetPlatform")
package fr.obeo.releng.targetplatform

import java.util.Locale
import com.google.common.base.Splitter
import org.eclipse.core.runtime.Platform
import org.eclipse.emf.common.util.DelegatingEList$UnmodifiableEList
import org.eclipse.jdt.launching.JavaRuntime

class TargetPlatform {
	String name
	contains TargetContent[] contents  
	refers derived IncludeDeclaration[] includes get {
		new UnmodifiableEList(contents.filter(typeof(IncludeDeclaration)).toList)
	}
	derived Option[] options get {
		new UnmodifiableEList(contents.filter(typeof(Options)).map[options].flatten.toList)
	}
	refers derived Location[] locations get {
		new UnmodifiableEList(contents.filter(typeof(Location)).toList)
	}
	refers derived Environment environment get {
		contents.filter(typeof(Environment)).head
	}
}

interface TargetContent {
	
}

class Options extends TargetContent {
	Option[] options
}

class Environment extends TargetContent {
	String[] env
	
	derived String operatingSystem get {
		val envToUpper = env.map[toUpperCase]
		return Platform.knownOSValues.findFirst[
			envToUpper.contains(it.toUpperCase)
		]
	}
	
	derived String windowingSystem get {
		val envToUpper = env.map[toUpperCase]
		val mathchingWS = Platform.knownWSValues.findFirst[
			envToUpper.contains(it.toUpperCase)
		]
		
		val knownWSUpperValues = Platform.knownWSValues.map[toUpperCase]
		val allWS = env.filter[
			knownWSUpperValues.contains(it.toUpperCase)
		]
		
		if (allWS.size <= 1 && (allWS.head == null || allWS.head.equalsIgnoreCase(operatingSystem))) {
			// case for win32 which is an os and an ws. Let's consider the first one 
			// as the os and the second as ws
			return null
		} else {
			return mathchingWS
		}
	}
	
	derived String architecture get {
		val envToUpper = env.map[toUpperCase]
		return Platform.knownOSArchValues.findFirst[
			envToUpper.contains(it.toUpperCase)
		]
	}
	
	derived Locale localization get {
		val availableLocales = Locale.availableLocales.map[toString].map[toUpperCase]
		val locale = env.findFirst[
			availableLocales.contains(it.toUpperCase)
		]
		
		if (locale != null) {
			var String language = "";
			var String country = "";
			var String variant = "";
	
			val tokens = Splitter.on('_').trimResults.split(locale).iterator;
			if (tokens.hasNext) {
				language = tokens.next
			}
			if (tokens.hasNext) {
				country = tokens.next
			}
			if (tokens.hasNext) {
				variant = tokens.next
			}
	
			return new Locale(language, country, variant);
		} else {
			return null;
		}
	}
	
	derived ExecutionEnvironment executionEnvironment get {
		val eeManager = JavaRuntime.executionEnvironmentsManager
		if (eeManager != null) {
			val ee = env.findFirst[eeManager.getEnvironment(it) != null]
			if (ee != null) {
				return eeManager.getEnvironment(ee)
			} else {
				return null
			}
		} else {
			return null
		}
	}
}

type Locale wraps Locale
type ExecutionEnvironment wraps org.eclipse.jdt.launching.environments.IExecutionEnvironment

class Location extends TargetContent {
	String ID
	String uri
	Option[] options
	contains IU[] ius
}

class IncludeDeclaration extends TargetContent {
	String importURI
}

class IU {
	String ID
	String version
}

enum Option {
	INCLUDE_REQUIRED as 'requirements' = 0 
	INCLUDE_ALL_ENVIRONMENTS as 'allEnvironments' = 1 
	INCLUDE_SOURCE as 'source' = 2
	INCLUDE_CONFIGURE_PHASE as 'configurePhase' = 3
}