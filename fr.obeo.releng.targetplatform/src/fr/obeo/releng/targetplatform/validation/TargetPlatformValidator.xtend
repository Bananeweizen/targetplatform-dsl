/*
 * generated by Xtext
 */
package fr.obeo.releng.targetplatform.validation

import com.google.common.base.Strings
import com.google.common.collect.LinkedHashMultimap
import com.google.common.collect.Multimaps
import com.google.common.collect.Sets
import com.google.inject.Inject
import fr.obeo.releng.targetplatform.IU
import fr.obeo.releng.targetplatform.Location
import fr.obeo.releng.targetplatform.Option
import fr.obeo.releng.targetplatform.TargetPlatform
import fr.obeo.releng.targetplatform.TargetPlatformPackage
import fr.obeo.releng.targetplatform.util.LocationIndexBuilder
import java.util.List
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.RuleCall
import org.eclipse.xtext.nodemodel.impl.CompositeNode
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class TargetPlatformValidator extends AbstractTargetPlatformValidator {

	@Inject
	LocationIndexBuilder indexBuilder;
	
	public static val CHECK__OPTIONS_SELF_EXCLUDING_ALL_ENV_REQUIRED = "CHECK__OPTIONS_SELF_EXCLUDING_ALL_ENV_REQUIRED"
	
	public static val CHECK__OPTIONS_EQUALS_ALL_LOCATIONS = "CHECK__OPTIONS_EQUALS_ALL_LOCATIONS"
	public static val CHECK__NO_OPTIONS_ON_LOCATIONS_IF_GLOBAL_OPTIONS = "CHECK__NO_OPTIONS_ON_LOCATIONS_IF_GLOBAL_OPTIONS"
	
	public static val DEPRECATE__OPTIONS_ON_LOCATIONS = "DEPRECATE__OPTIONS_ON_LOCATIONS"
	public static val DEPRECATE__STRINGS_ON_IU_VERSION = "DEPRECATE__STRINGS_ON_IU_VERSION"
	
	public static val CHECK__LOCATION_CONFLICTUAL_ID = "CHECK__LOCATION_CONFLICTUAL_ID"
	public static val CHECK__INCLUDED_LOCATION_CONFLICTUAL_ID = "CHECK__INCLUDED_LOCATION_CONFLICTUAL_ID"
	public static val CHECK__CONFLICTUAL_ID__BETWEEN_INCLUDED_LOCATION = "CHECK__INCLUDED_LOCATION_CONFLICTUAL_ID"
	
	public static val CHECK__LOCATION_ID_UNIQNESS = "CHECK__LOCATION_ID_UNIQNESS"	
	public static val CHECK__INCLUDE_CYCLE = "CHECK__INCLUDE_CYCLE"
	
	@Check // TESTED
	def checkAllEnvAndRequiredAreSelfExluding(TargetPlatform targetPlatform) {
		doCheckAllEnvAndRequiredAreSelfExluding(targetPlatform, targetPlatform.options, TargetPlatformPackage.Literals.TARGET_PLATFORM__OPTIONS);
	}
	
	@Check // TESTED
	def checkAllEnvAndRequiredAreSelfExluding(Location location) {
		doCheckAllEnvAndRequiredAreSelfExluding(location, location.options, TargetPlatformPackage.Literals.LOCATION__OPTIONS)
	}
	
	private def doCheckAllEnvAndRequiredAreSelfExluding(EObject optionOwner, List<Option> options, EStructuralFeature feature) {
		if (options.contains(Option.INCLUDE_ALL_ENVIRONMENTS) && options.contains(Option.INCLUDE_REQUIRED)) {
			error("All environments can not be included along with required artifacts, you must choose one of the two options.", 
					optionOwner, 
					feature, 
					options.indexOf(Option.INCLUDE_REQUIRED), CHECK__OPTIONS_SELF_EXCLUDING_ALL_ENV_REQUIRED)
			
			error("All environments can not be included along with required artifacts, you must choose one of the two options.", 
					optionOwner, 
					feature, 
					options.indexOf(Option.INCLUDE_ALL_ENVIRONMENTS), CHECK__OPTIONS_SELF_EXCLUDING_ALL_ENV_REQUIRED)
		}
	}
	
	@Check // TESTED
	def checkNoLocationOptionIfGlobalOptions(Location location) {
		if (!location.options.empty && !(location.eContainer as TargetPlatform).options.empty) {
			val nodes = NodeModelUtils::findNodesForFeature(location, TargetPlatformPackage.Literals.LOCATION__OPTIONS)
			val withKeyword = (nodes.head as CompositeNode).previousSibling
			val lastOption = (nodes.last as CompositeNode);
			acceptError("You can not define options on location and on target platform.",
				location, withKeyword.offset, lastOption.endOffset - withKeyword.offset, CHECK__NO_OPTIONS_ON_LOCATIONS_IF_GLOBAL_OPTIONS)
		}
	}
	
	@Check // TESTED
	def checkOptionsOnLocationAreIdentical(TargetPlatform targetPlatform) {
		if (targetPlatform.options.empty) { // else do not check as it is another error.
			val listOptions = targetPlatform.locations
			val first = listOptions.head
			val conflicts = listOptions.tail.filter[_| !Sets::symmetricDifference(_.options.toSet,first.options.toSet).empty]
			if (!conflicts.empty) {
				listOptions.forEach[_ |
					val nodes = NodeModelUtils::findNodesForFeature(_, TargetPlatformPackage.Literals.LOCATION__OPTIONS)
					if (!nodes.empty) {
						val withKeyword = (nodes.head as CompositeNode).previousSibling
						val lastOption = (nodes.last as CompositeNode)
						acceptError("Options of every locations must be the same",
							_, withKeyword.offset, lastOption.endOffset - withKeyword.offset, CHECK__OPTIONS_EQUALS_ALL_LOCATIONS)
					} else {
						val node = NodeModelUtils::getNode(_)
						acceptError("Options of every locations must be the same",
							_, node.offset, node.length, CHECK__OPTIONS_EQUALS_ALL_LOCATIONS)
					}
				]
			}
		}
	}
	
	@Check // TESTED
	def deprecateOptionsOnLocation(Location location) {
		val targetPlatform = location.eContainer as TargetPlatform
		
		if (targetPlatform.options.empty && !location.options.empty) {
			val nodes = NodeModelUtils::findNodesForFeature(location, TargetPlatformPackage.Literals.LOCATION__OPTIONS)
			val withKeyword = (nodes.head as CompositeNode).previousSibling
			val lastOption = (nodes.last as CompositeNode);
			acceptWarning("Options on location are deprecated. Define the option at the target level.",
				location, withKeyword.offset, lastOption.endOffset - withKeyword.offset, DEPRECATE__OPTIONS_ON_LOCATIONS)
		}
	}
	
	@Check // TESTED
	def deprecateIUVersionRangeWihString(IU iu) {
		if (iu.version != null) {
			val nodes = NodeModelUtils::findNodesForFeature(iu, TargetPlatformPackage.Literals.IU__VERSION)
			if ("STRING".equals((nodes.head.grammarElement as RuleCall).rule.name)) {
				warning("Usage of strings is deprecated for version range. You should remove the quotes.",
					iu, 
					TargetPlatformPackage.Literals.IU__VERSION,
					DEPRECATE__STRINGS_ON_IU_VERSION)
			}
		}
	}

	@Check // TESTED
	def checkIDUniqueOnAllLocations(TargetPlatform targetPlatform) {
		val locationsByURI = indexBuilder.getLocationIndex(targetPlatform)
		val resource = targetPlatform.eResource
		
		val locationIDsByURI = LinkedHashMultimap.create();  
		locationsByURI.keySet.forEach[
			locationIDsByURI.putAll(it, locationsByURI.get(it).map[ID].toSet)
		]
		
		val locationsURIWithoutConflictingID = locationIDsByURI.asMap.filter[key,value|value.size <= 1].keySet
		val locationsWithoutConflictingID = locationsURIWithoutConflictingID.map[locationsByURI.get(it)].flatten
		
		val locationsWithoutConflictingIDByID = Multimaps.index(locationsWithoutConflictingID.filter[ID!=null], [ID])
		val locationsWithDuplicateID = locationsWithoutConflictingIDByID.asMap.filter[key,value|value.map[uri].toSet.size > 1].values.flatten
		locationsWithDuplicateID.forEach[location|
			if (location.eResource == resource) {
				error('ID must be unique for each location', 
					location,
					TargetPlatformPackage.Literals.LOCATION__ID, 
					CHECK__LOCATION_ID_UNIQNESS
				)
			} else {
				val conflictualInclude = targetPlatform.includes.filter[
					val direct = indexBuilder.getImportedTargetPlatform(resource, it);
					direct.locations.contains(location) ||
					indexBuilder.getImportedTargetPlatforms(direct).map[locations].flatten.toSet.contains(location)
				].toSet
				
				conflictualInclude.forEach[
					error('''ID '«location.ID»' is duplicated in the included target platform''', 
						it, 
						TargetPlatformPackage.Literals.INCLUDE_DECLARATION__IMPORT_URI,
						CHECK__LOCATION_ID_UNIQNESS
					)
				]
			}
		]
	}
	
	@Check // TESTED
	def checkImportCycle(TargetPlatform targetPlatform) {
		val cycle = indexBuilder.checkIncludeCycle(targetPlatform)
		if (!cycle.empty) {
			val cyclingImport = targetPlatform.includes.findFirst[cycle.get(1).equals(indexBuilder.getImportedTargetPlatform(targetPlatform.eResource, it))]
			if (cyclingImport != null) {
				error('''Cycle detected in the included target platforms. Cycle is '«cycle.drop(1).map[eResource.URI].join("'' -> '")»'.''', 
					cyclingImport, 
					TargetPlatformPackage.Literals.INCLUDE_DECLARATION__IMPORT_URI,
					CHECK__INCLUDE_CYCLE
				)
			}
		}
	}
	
	@Check // PARTIALLY TESTED
	def checkSameIDForAllLocationWithSameURI(TargetPlatform targetPlatform) {
		val locationsByURI = indexBuilder.getLocationIndex(targetPlatform)
		val resource = targetPlatform.eResource
		
		for (locationURI : locationsByURI.keySet) {
			val externalLocations = locationsByURI.get(locationURI).filter[eResource != resource]
			val externalIDs = externalLocations.map[Strings.nullToEmpty(ID)].toSet
			
			val internalLocations = locationsByURI.get(locationURI).filter[eResource == resource]
			val internalIDs = internalLocations.map[Strings.nullToEmpty(ID)].toSet
			
			if (externalIDs.size > 1) {
				val externalLocationsWithConflictualID = externalLocations.filter[externalIDs.contains(ID)]
				val String msg = '''
					The ID for location '«locationURI»' must be unique. Found '«externalIDs.join("', '")»'  in '«externalLocationsWithConflictualID.map[eResource.URI.toString].toSet.join("', '")»'.
				''';
				val conflictualInclude = externalLocationsWithConflictualID.map[location|
					targetPlatform.includes.filter[
						val direct = indexBuilder.getImportedTargetPlatform(resource, it);
						direct.locations.contains(location) ||
						indexBuilder.getImportedTargetPlatforms(direct).map[locations].flatten.toSet.contains(location)
					]
				].flatten.toSet
				
				conflictualInclude.forEach[
					error(msg, 
						it, 
						TargetPlatformPackage.Literals.INCLUDE_DECLARATION__IMPORT_URI,
						CHECK__CONFLICTUAL_ID__BETWEEN_INCLUDED_LOCATION
					)
				]
			}  

			if (externalIDs.size == 1) {
				val diff = Sets.symmetricDifference(externalIDs, internalIDs);
				if (!diff.empty) {
					val String msg = '''
						The ID for location '«locationURI»' must be unique across included target platforms and the current one. Found '«externalIDs.head»'  in '«externalLocations.map[eResource.URI.toString].toSet.join("', '")»'.
					''';
					
					internalLocations.filter[!externalIDs.contains(Strings.nullToEmpty(ID))].forEach[
						error(msg, it, TargetPlatformPackage.Literals.LOCATION__ID, CHECK__INCLUDED_LOCATION_CONFLICTUAL_ID, externalIDs.head, externalLocations.head.uri)
					]
				}
			} 
			
			if (externalIDs.size < 1 && internalIDs.size > 1) {
				val msg = '''The ID for location '«locationURI»' must be unique. Found '«internalIDs.join("', '")»'.''';
				internalLocations.forEach[
					error(msg, it, TargetPlatformPackage.Literals.LOCATION__ID, CHECK__LOCATION_CONFLICTUAL_ID)
				]
			}
		}
	}
}
