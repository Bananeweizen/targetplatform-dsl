/**
 * generated by Xtext
 */
package fr.obeo.releng.targetplatform.validation;

import fr.obeo.releng.targetplatform.targetplatform.Location;
import fr.obeo.releng.targetplatform.targetplatform.Option;
import fr.obeo.releng.targetplatform.targetplatform.TargetplatformPackage;
import fr.obeo.releng.targetplatform.validation.AbstractTargetPlatformValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class TargetPlatformValidator extends AbstractTargetPlatformValidator {
  public final static String CHECK__OPTIONS_SELF_EXCLUDING_ALL_ENV_REQUIRED = "CHECK__OPTIONS_SELF_EXCLUDING_ALL_ENV_REQUIRED";
  
  @Check
  public void checkAllEnvAndRequiredAreSelfExluding(final Location location) {
    final EList<Option> options = location.getOptions();
    boolean _and = false;
    boolean _contains = options.contains(Option.INCLUDE_ALL_ENVIRONMENTS);
    if (!_contains) {
      _and = false;
    } else {
      boolean _contains_1 = options.contains(Option.INCLUDE_REQUIRED);
      _and = _contains_1;
    }
    if (_and) {
      int _indexOf = options.indexOf(Option.INCLUDE_REQUIRED);
      this.error("All environments can not be included along with required artifacts, you must choose one of the two options", location, 
        TargetplatformPackage.Literals.LOCATION__OPTIONS, _indexOf, TargetPlatformValidator.CHECK__OPTIONS_SELF_EXCLUDING_ALL_ENV_REQUIRED);
      int _indexOf_1 = options.indexOf(Option.INCLUDE_ALL_ENVIRONMENTS);
      this.error("All environments can not be included along with required artifacts, you must choose one of the two options", location, 
        TargetplatformPackage.Literals.LOCATION__OPTIONS, _indexOf_1, TargetPlatformValidator.CHECK__OPTIONS_SELF_EXCLUDING_ALL_ENV_REQUIRED);
    }
  }
}
