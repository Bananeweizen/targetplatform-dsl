/**
 * generated by Xtext
 */
package fr.obeo.releng.targetplatform.ui.quickfix;

import com.google.common.base.Objects;
import com.google.common.collect.Sets;
import fr.obeo.releng.targetplatform.targetplatform.Location;
import fr.obeo.releng.targetplatform.targetplatform.Option;
import fr.obeo.releng.targetplatform.targetplatform.TargetPlatform;
import fr.obeo.releng.targetplatform.validation.TargetPlatformValidator;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Custom quickfixes.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
@SuppressWarnings("all")
public class TargetPlatformQuickfixProvider extends DefaultQuickfixProvider {
  @Fix(TargetPlatformValidator.DEPRECATE__STRINGS_ON_IU_VERSION)
  public void removeQuotes(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IModification _function = new IModification() {
      public void apply(final IModificationContext context) throws Exception {
        final IXtextDocument xtextDocument = context.getXtextDocument();
        Integer _offset = issue.getOffset();
        Integer _length = issue.getLength();
        int _plus = ((_offset).intValue() + (_length).intValue());
        int _minus = (_plus - 1);
        xtextDocument.replace(_minus, 1, "");
        Integer _offset_1 = issue.getOffset();
        xtextDocument.replace((_offset_1).intValue(), 1, "");
      }
    };
    acceptor.accept(issue, "Remove quotes", "Remove quotes.", null, _function);
  }
  
  @Fix(TargetPlatformValidator.CHECK__OPTIONS_EQUALS_ALL_LOCATIONS)
  public void equalizeOptions(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        EObject _eContainer = element.eContainer();
        EList<Location> _locations = ((TargetPlatform) _eContainer).getLocations();
        final Procedure1<Location> _function = new Procedure1<Location>() {
          public void apply(final Location _) {
            final Location elemLoc = ((Location) element);
            final EList<Option> locOptions = elemLoc.getOptions();
            boolean _and = false;
            boolean _notEquals = (!Objects.equal(_, element));
            if (!_notEquals) {
              _and = false;
            } else {
              Set<Option> _set = IterableExtensions.<Option>toSet(locOptions);
              EList<Option> _options = _.getOptions();
              Set<Option> _set_1 = IterableExtensions.<Option>toSet(_options);
              Sets.SetView<Option> _symmetricDifference = Sets.<Option>symmetricDifference(_set, _set_1);
              boolean _isEmpty = _symmetricDifference.isEmpty();
              boolean _not = (!_isEmpty);
              _and = _not;
            }
            if (_and) {
              EList<Option> _options_1 = _.getOptions();
              _options_1.clear();
              EList<Option> _options_2 = _.getOptions();
              _options_2.addAll(locOptions);
            }
          }
        };
        IterableExtensions.<Location>forEach(_locations, _function);
      }
    };
    acceptor.accept(issue, 
      "Set all options equals to this one", "Set all options equals to this one", null, _function);
  }
}
